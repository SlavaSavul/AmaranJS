var amaran = (function () {

    var Amaran = {
      config: {
        type: 'notification',
        theme: 'default',
        position: 'top right',
        xaxis: 'top',
        yaxis: 'right',
        content: 'Hello from amaranjs, you just forget content.',
        in: 'fade',
        out: 'fade',
        selector: 'none',
        selectorEvent: "click",
        timeout: 3000
      },

    init: function (config) {
      if (config  !== undefined) {
        this.defaults = Helper.merge(this.config,config);
      }
        return this;
    },

    in: function (effect) {
        this.config.in = effect;
        return this;
    },

    out: function (effect) {
        this.config.out = effect;
        return this;
    },

    run: function() {
      Element.createWrapper(this);
      return this;
    },

    position: function(yaxis, xaxis) {
      this.config.xaxis = xaxis;
      this.config.yaxis = yaxis;
      this.config.position = yaxis +' '+ xaxis;
      return this;
    },
    timeout: function(value) {
        this.config.timeout = value;
        return this;
    },

    content: function (content){
      this.config.content = content;
      return this;
    }
  };


    return function (content) {
        if (content === undefined) {
            content = 'Hello from amaranjs, you just forget content.';
        }
        return Amaran.init(content);
    };
}());


var Element = {
  main: {},
  wrapper: '',
  amaran: false,
  createWrapper: function (main) {
    this.main = main;


    var inner;
    // Try to get wrapper element.
    var wrapper = document.getElementsByClassName('amaran-wrapper '+ main.config.yaxis + ' '+ main.config.xaxis);

    if(wrapper.length<=0) {
        // create new wrapper and inner wrapper
        var new_wrapper = this.createEl('amaran-wrapper '+ main.config.yaxis + ' '+ main.config.xaxis);
        inner = this.createEl('amaran-wrapper-inner');
        new_wrapper.appendChild(inner);
        document.querySelector('body').appendChild(new_wrapper);
      } else {
        // if we have a wrapper lets get inner wrapper.
        inner = wrapper[0].getElementsByClassName('amaran-wrapper-inner')[0];
      }
      this.wrapper = wrapper;
      // get amaran dom node.
      this.amaran = this.createAmaran();
      // append amaran to inner wrapper
      inner.appendChild(this.amaran);

  },

  createAmaran: function() {
    var amaran;

    var options = { template: this.main.config.theme };


    if ((typeof this.main.config.content) == 'object'){
      options = this.merge(options,this.main.config.content);
    } else {
      options['content'] = this.main.config.content;
    }
    amaran = Helper.parseHTML(Helper.engine(Themes.default(),options))[0];
    // Set default styles.
    amaran.style.cssText = Helper.styles.text();

    amaran.className += ' amaran--from'+Helper.capitalize(this.main.config.in);
    // get amaranjs position option
    var axy = this.main.config.position.split(" ");
    // positon vertical
    var ay  = axy[0];
    // position horizontal
    var ax  = axy[1];

    var position = Position;

    position.wrap = this.wrapper[0];

    position.el = amaran;

    position.calculate();

    this.in(amaran);

    return amaran;
  },

  in: function(elem) {
    var pos = this.main.config.position.split(" ");
    var that = this;

    if (pos[1] === 'right' && this.main.config.in === 'left') {
      this.timeout('right', '5px', elem);
    }

    if (pos[1] === 'right' && this.main.config.in === 'right') {
        this.timeout('marginLeft',0, elem);
    }

    if (pos[1] === 'left' && this.main.config.in === 'left') {

      this.timeout('marginLeft', '5px', elem);
    }
  },
  out: function(elem, out,config) {
    var pos = config.position.split(" ");
    var that = this;
    var coordinates = elem.getBoundingClientRect();

    if (pos[1] == 'right' && out == 'left') {
      this.moveX(elem,-(coordinates.left + coordinates.width + 15))
    }
    if (pos[1] == 'left' && out == 'left') {
      this.moveX(elem,-(coordinates.width + 15))
    }

    if (pos[1] == 'left' && out == 'right') {

      this.moveX(elem, (window.innerWidth + coordinates.width + 15))
    }

    if (pos[1] == 'right' && out == 'right') {
        this.moveX(elem,(coordinates.width + 15))
    }

    if (pos[1] == 'right' && out == 'bottom') {
      this.moveY(elem,(window.innerHeight-coordinates.top + 15))
    }
  },
  moveX: function(elem, pos){
    this.trans('x', pos, elem);
  },
  moveY: function(elem, pos){
    this.trans('y', pos, elem);
  },
  trans: function(direction, pos, elem) {
    elem.style.transform = 'translate' + direction.toUpperCase() + '(' + pos + 'px)';
  },
  timeout: function(key, value, amaran) {
    var that = this;
    var transitionEnd = this.amaranTransitionEnd();
    var timeout = this.main.config.timeout;
    var out = this.main.config.out;

    // If i use traditional event listener it can trigger more than once. ( transition can be tricky)
    // with this function it will trigger once.
    // http://stackoverflow.com/questions/4878805/force-javascript-eventlistener-to-execute-once
    var transitionListener = function (amaran, timeout,out, config){
        that.amaranClose(amaran, timeout, out,config);

        window.removeEventListener(transitionEnd, transitionListener, false );
    };

    // Yep yet again settimout and this problem. So lets copy.
    var config = Helper.merge(that.main.config,{});

    setTimeout(function () {
      amaran.style[key] = value;
      amaran.addEventListener(transitionEnd, transitionListener(amaran, timeout,out,config), false);
    },100);
  },
  amaranClose: function(elem, timeout, out,config){
    var that = this;

    setTimeout(function (){
      that.out(elem, out,config);
    }, timeout);

  },
  amaranTransitionEnd:function  () {
      var i,
          undefined,
          el = document.createElement('div'),
          transitions = {
              'transition':'transitionend',
              'OTransition':'otransitionend',
              'MozTransition':'transitionend',
              'WebkitTransition':'webkitTransitionEnd'
          };

      for (i in transitions) {
          if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {
              return transitions[i];
          }
      }
  },

  createEl: function(name){
    var elem = document.createElement("div");
    elem.className += name;
    return elem;
  }

};

var Helper = {
  merge: function (a, b) {
    var c = {};
    for(var idx in a) { c[idx] = a[idx]; }
    for(var idx in b) { c[idx] = b[idx]; }
    return c;
  },
  parseHTML : function(str) {
    var tmp = document.implementation.createHTMLDocument();
    tmp.body.innerHTML = str;
    return tmp.body.children;
  },
  engine: function(html, options) {
      var re = /<%([^%>]+)?%>/g, reExp = /(^( )?(if|for|else|switch|case|break|{|}))(.*)?/g, code = 'var r=[];\n', cursor = 0, match;
      var add = function(line, js) {
        js? (code += line.match(reExp) ? line + '\n' : 'r.push(' + line + ');\n') :
            (code += line != '' ? 'r.push("' + line.replace(/"/g, '\\"') + '");\n' : '');
        return add;
      }
      while(match = re.exec(html)) {
        add(html.slice(cursor, match.index))(match[1], true);
        cursor = match.index + match[0].length;
      }
      add(html.substr(cursor, html.length - cursor));
      code += 'return r.join("");';
      return new Function(code.replace(/[\r\t\n]/g, '')).apply(options);
    },
    styles: {
      style:{
        'display': 'block',
        'opacity': 1
      },
      text: function(){
        var style  = '';
        for(var i in this.style) {
          style += i + ':' + this.style[i] + ';';
        }
        return style;
      },
      set: function(key,value) {
        this.style[key] = value;
        return this;
      },
      get: function(key) {
        return this.style[key];
      },
      unset: function(key) {
        delete this.style[key];
        return this;
      }
    },
    capitalize: function(s) {
       return s && s[0].toUpperCase() + s.slice(1);
    }
};

var Position = {
  wrap: false,
  el: false,
  //
  window: {
    width: window.innerWidth,
    height: window.innerHeight
  },
  calculate: function() {
    this.wrapper.width = this.wrap.offsetWidth;
    this.wrapper.height = this.wrap.offsetHeight;
    this.wrapper.top = this.wrap.offsetTop;
    this.wrapper.bottom = this.window.height - (this.wrap.top - this.wrap.height);
    this.wrapper.left = this.wrap.offsetLeft;
    this.wrapper.right = this.window.width - (this.wrap.left + this.wrap.width);
    this.element.top = this.el.offsetTop;
    this.element.height = this.el.offsetHeight;
    this.element.bottom = (window.height - this.element.top)
  },
  wrapper: {
    width: 0,
    height: 0,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  },
  element: {
    width: 0,
    height: 0,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  }
};

var Themes = {
  default: function(){
        return '<div class="amaran <%this.template%>">'+
            '<div class="default-spinner">'+
            '<span style="background-color:<% if(typeof this.color == "undefined"){%>#27ae60<%}else{%><%this.color%><%}%>"></span>'+
            '</div>'+
            '<div class="default-message">'+
            '<span><%this.content%></span>'+
            '</div>'+
            '</div>';
      }
};
